version: 2
jobs:
  build:
    docker:
      - image: tigrlab/ciftify_ci:0.1
    steps:
      - checkout:
          path: /home/ciftify
      - run:
          name: Set Paths
          command: |
            echo 'export PATH=/home/ciftify/ciftify/bin:$PATH' >> $BASH_ENV
            echo 'export PYTHONPATH=/home/ciftify/:$PYTHONPATH' >> $BASH_ENV
            echo 'export CIFTIFY_TEMPLATES=/home/ciftify/data' >> $BASH_ENV
      - save_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - /home/ciftify

  dependencies:
    docker:
      - image: tigrlab/ciftify_ci:0.1
    steps:
      - restore_cache:
          keys:
            - v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - deps1-{{ .Branch }}-{{ checksum "/home/ciftify/cifti_requirements.txt" }}
            - deps1
      - run:
          name: install dependencies
          command: |
            python3 -m venv /home/venv
            source /home/venv/bin/activate
            pip install -r /home/ciftify/cifti_requirements.txt
      - save_cache:
          paths:
            - "/home/venv"
          key:  deps1-{{ .Branch }}-{{ checksum "/home/ciftify/cifti_requirements.txt" }}

  standard_tests:
    docker:
      - image: tigrlab/ciftify_ci:0.1
    steps:
      - restore_cache:
          keys:
            - v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - deps1-{{ .Branch }}-{{ checksum "/home/ciftify/cifti_requirements.txt" }}
      - run:
          name: run tests
          command: |
            source  /home/venv/bin/activate
            mkdir -p /home/outputs/standard_tests/
            cd /home/ciftify
            pytest --junitxml=/home/outputs/standard_tests/results.xml tests/*py
      - store_artifacts:
          path: /home/outputs/standard_tests
          destination: standard_tests
      - store_test_results:
          path: /home/outputs

  functional_tests:
    docker:
      - image: tigrlab/ciftify_ci:0.1
    steps:
      - restore_cache:
          keys:
            - v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - deps1-{{ .Branch }}-{{ checksum "/home/ciftify/cifti_requirements.txt" }}
      - run:
          name: run tests
          command: |
            source  /home/venv/bin/activate
            mkdir -p /home/outputs/functional_tests/
            cd /home/ciftify
            pytest --junitxml=/home/outputs/functional_tests/results.xml tests/functional/*py
      - store_artifacts:
          path: /home/outputs/functional_tests
          destination: functional_tests
      - store_test_results:
          path: /home/outputs

  test_and_deploy_docker:
    docker:
      - image: docker:19.03-rc-git
    working_directory: /home/ciftify
    steps:
      - checkout:
          path: /home/ciftify
      - run:
          name: Paths and Dependencies
          command: |
            apk add --no-cache bash pigz python3
            echo "export GIT_TAG=$(git describe --tags)" >> $BASH_ENV
      - restore_cache:
          keys:
            - docker-test-v1-{{ .Branch }}-{{ .Revision }}
            - docker-test-v1-{{ .Branch }}
            - docker-test-v1-master-
            - docker-test-v1-
          paths:
            - /tmp/cache/docker.tar.gz
      - setup_remote_docker
      - run:
          name: Load Docker Image Layer Cache
          no_output_timeout: 30m
          command: |
            if [ -f /tmp/cache/docker.tar.gz ]; then
              pigz -d --stdout /tmp/cache/docker.tar.gz | docker load
            fi
      - run:
          name: Build Docker Image
          no_output_timeout: 60m
          command: |
            cd ciftify/bidsapp
            docker build \
              --cache-from=tigrlab/fmriprep_ciftify \
              --rm=false \
              -t tigrlab/fmriprep_ciftify:latest .
      - run:
          name: Test Docker Version
          command: |
            source $BASH_ENV
            FMRIPREP_VERSION=$(docker run --entrypoint='' tigrlab/fmriprep_ciftify:latest fmriprep --version)
            FVERSION=$(echo $FMRIPREP_VERSION | cut -d" " -f2)
            echo "VERSION: ${FVERSION}-${GIT_TAG}"
            # DOCKERVERSION=$(docker run --rm -it tigrlab/fmriprep_ciftify:latest --version)
            # echo "DOCKERVERSION: ${DOCKERVERSION}"
            # test "$DOCKERVERSION" = "${FVERSION}-${GIT_TAG}"
      - run:
          name: Docker Save
          no_output_timeout: 30m
          command: |
            mkdir -p /tmp/cache
            docker save poldracklab/fmriprep:1.3.2 tigrlab/fmriprep_ciftify:latest \
            | pigz -3 > /tmp/cache/docker.tar.gz
      - save_cache:
          key: docker-test-v1-{{ .Branch }}-{{ .Revision }}-{{ epoch }}
          paths:
            - /tmp/cache/docker.tar.gz
      - run:
          name: Deploy to Docker Hub
          no_output_timeout: 40m
          command: |
            source $BASH_ENV
            FMRIPREP_VERSION=$(docker run --entrypoint='' tigrlab/fmriprep_ciftify:latest fmriprep --version)
            FVERSION=$(echo $FMRIPREP_VERSION | cut -d" " -f2)
            if [[ -n "$DOCKER_PASS" ]]; then
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              docker tag tigrlab/fmriprep_ciftify tigrlab/fmriprep_ciftify:unstable
              docker push tigrlab/fmriprep_ciftify:unstable
              if [[ -n "$GIT_TAG" ]]; then
                docker push tigrlab/fmriprep_ciftify:latest
                docker tag tigrlab/fmriprep_ciftify:latest tigrlab/fmriprep_ciftify:${FVERSION}-${GIT_TAG}
                docker push tigrlab/fmriprep_ciftify:${FVERSION}-${GIT_TAG}
              fi
            fi

  test_and_deploy_pypi:
    docker:
      - image: tigrlab/ciftify_ci:0.1
    working_directory: /home/ciftify
    steps:
      - checkout:
          path: /home/ciftify
      - run:
          name: Set Paths
          command: |
            echo "export GIT_TAG=$(git describe --tags)" >> $BASH_ENV
      - run:
          name: Verify Version and Tag Match
          command: |
            python3 -m venv /home/pypi_env
            source /home/pypi_env/bin/activate
            pip install setuptools m2r wheel twine
            python setup.py verify
      - run:
          name: Init .pypirc
          command: |
            echo -e "[distutils]" >> ~/.pypirc
            echo -e "index-servers=" >> ~/.pypirc
            echo -e "\tpypi" >> ~/.pypirc
            echo -e "\ttestpypi" >> ~/.pypirc
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = $PYPI_USER" >> ~/.pypirc
            echo -e "password = $PYPI_PASS" >> ~/.pypirc
            echo -e "[testpypi]" >> ~/.pypirc
            echo -e "repository: https://test.pypi.org/legacy/" >> ~/.pypirc
            echo -e "username = $TESTPYPI_USER" >> ~/.pypirc
            echo -e "password = $TESTPYPI_PASS" >> ~/.pypirc
      - run:
          name: Create Packages
          command: |
            source /home/pypi_env/bin/activate
            python /home/ciftify/setup.py sdist
            python /home/ciftify/setup.py bdist_wheel
      - run:
          name: Upload To testpypi
          command: |
            source /home/pypi_env/bin/activate
            twine upload --verbose --repository testpypi dist/*
      - run:
          name: Try testpypi
          command: |
            python3 -m venv /home/testpypi
            source /home/testpypi/bin/activate
            pip install -i https://test.pypi.org/simple/ --no-deps ciftify
      - run:
          name: Upload To pypi
          command: |
            source /home/pypi_env/bin/activate
            twine upload --verbose --repository pypi dist/*


workflows:
  version: 2
  build-and-test:
    jobs:
      - build:
          filters:
            branches:
              only: /.*/
            tags:
              only: /.*/
      - dependencies:
          requires:
            - build
          filters:
            branches:
              only: /.*/
            tags:
              only: /.*/
      - standard_tests:
          requires:
            - dependencies
          filters:
            branches:
              only: /.*/
            tags:
              only: /.*/
      - functional_tests:
          requires:
            - standard_tests
          filters:
            branches:
              only: circleci_test
            tags:
              ignore: /.*/
      - test_and_deploy_pypi:
          requires:
            - functional_tests
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]\.[0-9]\.[0-9](-[0-9]+|-alpha|-beta)?$/
      - test_and_deploy_docker:
          requires:
            - functional_tests
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]\.[0-9]\.[0-9](-[0-9]+|-alpha|-beta)?$/
